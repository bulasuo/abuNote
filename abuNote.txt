/**
 * Created by 阿布 on 2016/2/1 9:01
 *Artcm2015  Artcm@2015
 */
工具:
加固::  http://console.qcloud.com/legu/tool/index
数据库远程连接   :: dbvisualizer
数据库设计pdm文件::  powerDesigner
linux机器远程连接::  SecureCRT
.bak  备份文件 可删除文件
Alpha（α）内侧; Beta（β）外测; Gamma（γ）发布候选; Lambda（λ）;
Unary(一元的);Binary(二元的);ternary(三元的);
test
 @Deprecated  //过时的
 {@link 类}
 {@link #方法()}
	Alpha：内测
	Beta: 外测


 Microsoft Team Foundation Server

adb命令
 常用退出 shell命令: exit;bye;quit
 su: 判断是否root
 adb root手机:http://blog.csdn.net/hellworl/article/details/7078184
 adb shell dumpsys activity top//参看当前手机的top activity
 
 ******************************adb shell*******************************************
linux远程访问工具: secureCRT
--help 显示命令提示
ctrl+c，彻底终止该进程
ctrl+z   挂起当前进程 (如果需要恢复到前台输入fg，恢复到后台输入bg)
pwd   查看当前全路径
cd .. 返回上一级
cd - ,意思是返回到上次的目录
cd /  返回根目录
cd \  返回登录用户目录(root?)
ls -l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出
tail -f 文件  监听文件内容变化
q     退出打开的文件。

 run-as com.example.android //对应包名   
 ls查看当前目录下的所有文件，找到shared_prefs
 cd shared_prefs
 ls 查看所有的 sharedpreferences 文件 
 cat XXX.xml 查看指定的SP 
**********************************************************************************

 测试图片地址 : http://img.ivsky.com/img/bizhi/slides/201612/25/january_2017-005.jpg
/////////////////////////////////////////////////////////////
cmd- 先编译(带依赖jar包编译test.java 然后运行test.class)
javac -cp .;E:\test\lib\json.jar test.java
java test
/////////////////////////////////////////////////////////////
git - android studio教程 :http://my.oschina.net/u/2367628/blog/508283
git:
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000
http://blog.csdn.net/god_wot/article/details/10522405
http://www.cnblogs.com/alanalan/archive/2012/09/17/2689747.html

git 命令大全:http://blog.csdn.net/u012556150/article/details/50736896

开源项目管理者解决fork项目的 pull request
Step 1: From your project repository, check out a new branch and test the changes.
git checkout -b bulasuo-master master 以mster为基础创建新分支
git pull git://github.com/bulasuo/testApp.git master //pull请求者的仓库

Step 2: Merge the changes and update on GitHub.
git checkout master
git merge --no-ff bulasuo-master
git push origin master



本地文件夹创建版本库

git branch --set-upstream master origin/master

$ git init

本地文件的预加载 和 说明 和提交
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."
$ git add * git会自动把你当前目录所有修改过的文件添加
$ git add . Git会递归地将你执行命令时所在的目录中的所有文件添加上去，所以如果你将当前的工作目录作为参数，它就会追踪那儿的所有文件


远程仓库创建与关联 创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

关联版本库
$ git remote add origin git@github.com:bulasuo/abuHttp.git

把远程厂库更新到此
$ git pull origin master

提交本地版本到远程版本库
$ git push -u origin master 或者 $ git push origin master

clone 远程版本库  到父目录clone到子目录(远程库)
$ git clone git@github.com:bulasuo/abuNote.git
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

已经有remote地址 可以
$ git remote rm origin清除

Git鼓励大量使用分支：
查看图线提交历史
git log --oneline --graph --decorate
查看分支：git branch
查看本地和远程分支：git branch -a
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
把远程分支checkout as new local branch
$ git checkout -b remote_branch origin/remote_branch
查看远程地址  git remote -v
添加上游仓库地址  git remote add upstream URL

对上游仓库的操作
git fetch upstream
git merge upstream/master

标签TAG:
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
git tag -n可以查看所有标签。
git push origin <tagname>可以推送一个本地标签；
git push origin --tags可以推送全部未推送过的本地标签；
git tag -d <tagname>可以删除一个本地标签；
git push origin :refs/tags/<tagname>可以删除一个远程标签。
git checkout <tag>回退到tag的代码 但是要注意当前代码可能会丢失(切换到tag历史记录会处在分离头指针状态，这个是的修改是很危险的，在切换回主线时如果没有合并，之前的修改提交基本都会丢失，如果需要修改可以尝试git checkout -b branch tag创建一个基于指定tag的分支，例如：git checkout -b tset v0.1.0  这个时候就会在分支上进行开发，之后可以切换到主线合并)

git版本回退
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

文件内容搜索:
git grep xmmap
显示行号:
git grep -n xmmap
只显示文件名:
git grep --name-only xmmap
可以查看每个文件有多少行:
git grep -c xmmap
特定版本的文件内容查找:
git grep xmmap v1.5.0

Please enter a commit message to explain why this merge is necessary.
请输入提交消息来解释为什么这种合并是必要的
1.按键盘字母 i 进入insert模式
2.修改最上面那行黄色合并信息,可以不修改
3.按键盘左上角"Esc"
4.输入":wq",注意是冒号+wq,按回车键即可

///////////////git 分支开发策略//////////////////////////////////////////////////////////////////////////
master作为主分支,
bug应该在master上修改 
并且master有变动后<比如在master上修改了bug>  要把master合并到 分支比如develop上
这样master和develop都会bug被修改了
如果在develop上又有一个分支develop_1 则master修改了bug后 应该把master和并到develop上,develop合并到develop_1上.
即(develop依赖master, develop_1依赖develop,而修改bug要从根源分支修改即master,并且修改完后 依次同步到子分支)
比如我这次开发的项目 我把email添加到了develop上 这是大错特错的 因为 我的本意是email肯定以后会和并到master 但是如果develop迟迟没用到  那么email也就迟迟和并不到master上了
所以我应该把email写在master上的  然后在和并master'到develop上的

2017/1/18////////////////////// 记录分界线/////////////////////////////////////////////////////////////////////////////////
//////////////////////////////业务逻辑大总结//////////////////////////////////////////////////////////////////////////////////////////
1.异步的活动要注意异步间状态的通知(否则出现上下文不存在的异常)::  异步任务要订阅activity和fragment 的destory状态, 比如网络请求的回调中可能上下文已经消失
2.对于网络请求后返回的数据操作要做同步机制,比如recycleView.adapter的 List<>data,,否则后期对他的处理有异常
3.activity 的launch()方法写在activity里面
4.写代码要注意 分别出代码块的依赖主体, 因为依赖的主体异常,各种状态会导致依赖者的异常, 比如Context上下文, activity,fragment上启动dialog, show的时候上下文已经finish 而异常
5.public static DialogCityPicker getInstance(Activity activity, OnChangeListener listener) {
        if (instance == null || activity != mContext)//这里 activity != mContext一定要写,因为这个单例的依赖是activity 而activity会变,比如launMode为standard的activity,两次进同一个activity页面,他们的activity实例不是同一个,并且上一个activity实例已经销毁,所以这里的单例的上下文就已经销毁了
            instance = new DialogCityPicker(activity);
        return instance;
    }
 6.移动端(UI展示端)的数据持久模型的设计需要服务器遵循数据唯一的原则,不要反悔脏数据(返回的数据的字段,空就是空, 需要什么数据就返回且仅返回该字段)
 7>DiffUtil.DiffResult 的使用
 8.构造方法不会跳到子类重写的构造方法,而普通方法会. 
 9.android 一些工具类写成懒汉式单例 单例成员变量不要持有activity
 10.activity,fragment启动后 延迟网络请求,先展示一个loging,这样减轻创建view时的cpu并发
 11.xxxActivity.this 这种不能用 ,会导致内存泄露 不要在匿名内部类中使用外部引用, 而要用弱引用 并且在异步的回调中判断上下文还存不存在
12.public final class NavUtils {

    private NavUtils() {
        throw new RuntimeException("NavUtils cannot be initialized!");//可以防止被无参实例化
    }

}
13.将不需要序列化的属性前添加关键字transient
14.
     全局变量:    使用static 关键字进行声明的变量
     成员变量：还有就是方法外的变量。生命周期与类相同。
     局部变量：就是方法中的变量。生命周期就是再次方法中
     对象销毁后 非静态成员变量会变成null依次嵌套

15.//定义一个共有的静态方法，返回该类型实例
    public static SingletonTest getIstance() { 
        // 对象实例化时与否判断（不使用同步代码块，instance不等于null时，直接返回对象，提高运行效率）
        if (instance == null) {
            //同步代码块（对象未初始化时，使用同步代码块，保证多线程访问时对象在第一次创建后，不再重复被创建）
            synchronized (SingletonTest.class) {
                //未初始化，则初始instance变量
                if (instance == null) {
                    instance = new SingletonTest();   
                }   
            }   
        }   
        return instance;   
    } 
16.http://www.cnblogs.com/dolphin0520/p/3919839.html
设计模式的六大原则
一.单一职责原则 : 一个类只负责一个功能领域中的相应职责
二.开闭原则 : 对扩展开放，对修改关闭(写一个基类,多个要扩展的子类继承这个基类)
三.里氏替换原则 : 尽量用基类
四.依赖倒置原则 : 要针对接口编程，而不是针对实现编程
五.接口隔离原则 : 使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。
六.迪米特法则 : 不要和“陌生人”说话、只与你的直接朋友通信等
IOC(控制反转): 类中的成员不要写死,而是用构造注入或者属性注入 或者spring xml配置文件配置注入去控制这个成员
AOP(面向切面编程,是对oop的一个补充): 把业务中的共用逻辑提取出来,然后大家共用(即实现了横向把逻辑提取出来)
	如servlet,许多个servlet中有 操作日志,安全监测,事务处理 这三个业务是共用的 就可以横向提取出来
17.重写:需要继承;重载(同个方法名不同参数);多态(重写就是利用了java的多态性)
多态的定义：指允许不同类的对象对同一消息做出响应。
即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）
18.对于sql注入攻击的防范手段:
	1)表名加$特殊符号,然后用户输入的参数不允许有$符号
	2)参数只能是数字
	3)对参数进行 sql语句检测 update,select,and,;,等等
 对于网站被劫持脚本注入,重写钓鱼页面,盗取用户名密码 应该采取https协议 防止劫持
 对于c/s架构可以不用https 但是自己采用ssl协议 写加密传输
19.静态内部类和非静态内部类之间到底有什么不同呢？下面是两者间主要的不同。
    （1）内部静态类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。
    （2）非静态内部类能够访问外部类的静态和非静态成员。静态类不能访问外部类的非静态成员。他只能访问外部类的静态成员。
    （3）一个非静态内部类不能脱离外部类实体被创建，一个非静态内部类可以访问外部类的数据和方法，因为他就在外部类里面。


 9.内存策略分为 
	静态存储分配 :是指在编译时就能确定每个数据目标在运行时刻的存储空间需求,(静态变量 方法等等)
	堆内存: 主要用来存放对象的，(效率低,回收要时间,自由,无需知道数据停留多久)
	栈内存: 主要是用来执行程序的 (按照先进后出的原则进行分配)
java 的 jvm中 new一个对象 会在堆内存放对象实例, 在堆栈(stack(栈内存))中放引用

堆是一个运行时数据区,类的(对象从中分配空间。这些对象通过new、newarray、anewarray和multianewarray等指令建立，它们不需要程序代码来显式的释放。堆是由垃圾回收来负责的，堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配内存的，Java的垃圾收集器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态分配内存，存取速度较慢。 

栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量(,int, short, long, byte, float, double, boolean, char)和对象句柄。
int a = 3; 

　　int b = 3; 

　　编译器先处理int a = 3;首先它会在栈中创建一个变量为a的引用，然后查找栈中是否有3这个值，如果没找到，就将3存放进来，然后将a指向3。接着处理int b = 3;在创建完b的引用变量后，因为在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同时均指向3的情况。这时，如果再令a=4;那么编译器会重新搜索栈中是否有4值，如果没有，则将4存放进来，并令a指向4;如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。要注意这种数据的共享与两个对象的引用同时指向一个对象的这种共享是不同的，因为这种情况a的修改并不会影响到b, 它是由编译器完成的，它有利于节省空间。而一个对象引用变量修改了这个对象的内部状态，会影响到另一个对象引用变量 

局部变量的基本类型值指的是那些保存在栈内存中的简单数据段，即这种值完全保存在内存中的一个位置。
而引用类型值则是指那些保存在堆内存中的对象，意思是变量中保存的实际上只是一个指针，这个指针指向内存中的另一个位置，该位置保存对象。
或者类中的基本类型值是保存在堆内存的
http://www.cnblogs.com/xiohao/p/4296059.html
int[] array=new int[]{1,2};
由于new了一个对象，所以new int[]{1,2}这个对象时存储在堆中的，也就是说1,2这两个基本数据类型是存储在堆中，
这也就很有效的反驳了基本数据类型一定是存储在栈中~~


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
非自动变量: 非自动释放的变量 如全局变量 ,静态变量
自动变量: 局部变量
根据编译器不同情况有所不同，例如写死循环while(true)有的编译器会傻傻的每次都把true做一下判断，所以一般用for（;;）写死循环比较好
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////volatile///////////////////////////////////////////////////////////////////////////////////////////////////////////
volatile 告诉编译器不要优化代码(读的时候要从主存中读取) 但不能保证它修饰的变量 被同步
不能被同步原因:  两个线程读的时候拿到的是主存中最新的数据,但是有可能读的时候在其他操作线程中已经产生更新的数据
所以要同步不能只依赖 volatile, volatile至少3告诉编译器不要优化代码,来给程序带来 异步发生的可能性:
 如   volatile char a;   
        a=0; 
       while(!a){ 
//do some things;   
       }   
       doother(); 
   如果没有 volatile doother()不会被执行
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
阿里热更新 andfix
::
不同版本号的两个apk 不可以打出补丁文件
打出的补丁文件可以用在其他版本号的应用
要根据当前版本号来检查,有新版本就整包更新 否则 打且只打打上本版本号的补丁
so补丁包要带上打出补丁的apk的版本号

usage: apkpatch -f <new> -t <old> -o <output> -k <keystore> -p <***> -a <alias> -e <***>
 -a,--alias <alias>     keystore entry alias.
 -e,--epassword <***>   keystore entry password.
 -f,--from <loc>        new Apk file path.
 -k,--keystore <loc>    keystore path.
 -n,--name <name>       patch name.
 -o,--out <dir>         output dir.
 -p,--kpassword <***>   keystore password.
 -t,--to <loc>          old Apk file path.

生成补丁::
apkpatch -f xiaomi_signed2.apk -t xiaomi_signed.apk -o E:\0220\andfix\apkpatch-1.0.3 -k artcm.jks -p Cninfox123 -a artcm -e artcm123

给apk签名::
jarsigner -verbose -keystore ..\artcm.jks -storepass Cninfox123 -signedjar xiaomi_signed.apk -digestalg SHA1 -sigalg MD5withRSA xiaomi.apk artcm(artcm 指别名keyAlias)
artcm123
参考资料:  http://blog.csdn.net/xiaohai0504/article/details/7598178
查看证书的信息:
keytool -list -v -keystore e:\keytool\yushan.keystore -storepass 123456
查看apk证书:
将apk 的META-INF文件夹解压出来，得到其中的CERT.RSA文件 然后用keytool工具
keytool -printcert -file META-INF/CERT.RSA
//////////////////////////notes/////////////////////////////////////////////////////////////////////
1.异步线程里的回调方法中用到本线程里的成员时要判断本线程里的成员还在否,
比如UI线程里的activity当回调时,可能ui组件已经被销毁,这时就要判断组件还在否
////////////////////////////////////////////////////////////////////////////////////////////////

I/System.out: ::getFilesDir-/data/data/com.artcm.artcmandroidapp/files
I/System.out: ::getCacheDir-/data/data/com.artcm.artcmandroidapp/cache
I/System.out: ::getExternalStorageDirectory-/storage/emulated/0
I/System.out: ::getExternalFilesDir("Music")-/storage/emulated/0/Android/data/com.artcm.artcmandroidapp/files/Music
I/System.out: ::getExternalCacheDir-/storage/emulated/0/Android/data/com.artcm.artcmandroidapp/cache
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
每个界面写launch(from,其他属性)方法
///////////java中的三种取整函数//////////////////////////////////////////////////////////////////////////////////////
舍掉小数取整:Math.floor(3.5)=3
四舍五入取整:Math.rint(3.5)=4
进位取整:Math.ceil(3.1)=4 
//////////安卓事件传递利器/////////////////////////////////////////////////////////////////////////////////////////////////////
CoordinatorLayout      ::最大拦截事件的协调器
ViewOffsetBehavior    ::行为
ViewOffsetHelper   :: bindView 然后组织view的行为
这3者协调view的行为很有用

///////////////java异常处理//////////////////////////////////////////////////////////////////////////
throw 只是告诉调用者要进行异常捕获,就算,没有throw 遇到异常还是一层层向上传递,最多传递到进程导致进程错误退出
每个方法开头都要对此方法的参数以及需要用到的成员变量做null检查

///////////////算法的时间复杂度 和 空间复杂度//////////////////////////////////////////////////////////////////////////
时间复杂度:耗时递增-  常数阶-O(1); 次方阶-O(n^1);O(n^2):O(n^3)....; 指数阶-O(2^n)

====时间复杂度与执行指令数成正比  
**常数阶(没有参数n)
x=91; y=100;
while(y>0) if(x>100) {x=x-10;y--;} else x++;
解答： T(n)=O(1)，
**次方阶(参数n 的阶乘)
 x=1; 
for(i=1;i<=n;i++) 
        for(j=1;j<=i;j++)
           for(k=1;k<=j;k++)
               x++; 　
解答: T(n)=O(n^3)
**指数阶(参数n的值 表示算法的阶乘)

====空间复杂度与内存成正比
**空间复杂度O(1)，表示所需空间为常量，并且与n无关。
一般很少有次方阶 和 指数阶的  有的话说明方法写得很烂

////////////////android ViewHolder 利用setTag保存holder提高效率//////////////////////////////////////////////////////////////////
@Override
      public View getView(int position, View convertView, ViewGroup parent) {
        // TODO 自动生成的方法存根
        ViewHolder holder;
        if(convertView == null)
        {
          convertView = mInflater.inflate(R.layout.item, null);
          holder = new ViewHolder();
          holder.imageView = (ImageView)convertView.findViewById(R.id.imageView);
          holder.textView = (TextView)convertView.findViewById(R.id.textView);
          convertView.setTag(holder);
        }
        holder = (ViewHolder)convertView.getTag();
        
        holder.imageView.setImageResource(imageId[position]);
        holder.textView.setText(title[position]);
        return convertView;
      }

///////////////java 反射机制//////////////////////////////////////////////////////////////////////////
getFields()获得某个类的所有的公共（public）的字段，包括父类。 
getDeclaredFields()获得某个类的所有申明的字段，即包括public、private和proteced，但是不包括父类的申明字段。 
同样类似的还有getConstructors()和getDeclaredConstructors()，getMethods()和getDeclaredMethods()。
**改变成员变量值
Class ownerClass = owner.getClass();  
Class ownerClass = Class.forName(className);  
Field field = sayClass.getDeclaredField("content");
ield.setAccessible(true);//跳过安全检验,防止是private权限 报错:java.lang.IllegalAccessException
field.set(say, "小公举");
**invoke方法
Method method = ownerClass.getMethod(methodName,argsClass);
method.invoke(owner, args);
**实例化对象
Class newoneClass = Class.forName(className);  
Constructor cons = newoneClass.getConstructor(argsClass);
 XX xx = cons.newInstance(args); 

///////////////android TextView的自动化填充//////////////////////////////////////////////////////////////////////////
<string name="age">王明今年 %1$d 岁</string>
然后设置的时候就可以：
textView.setText(String.format(mContext.getString(R.string.age), age));

///////////////android动画学习//////////////////////////////////////////////////////////////////////////
http://my.oschina.net/Bruce370/blog/493268
http://blog.csdn.net/feiduclear_up/article/details/45893619
http://blog.csdn.net/feiduclear_up/article/details/45915377
http://blog.csdn.net/lmj623565791/article/details/38067475
//rotationX:围绕X轴旋转
**ViewPropertyAnimator
ViewPropertyAnimator animator5 = imageView.animate();
        animator5.translationX(200).scaleX(2).setDuration(2000).start();
//位移动画
**package android.view.animation;
layFilter.clearAnimation();
Animation transIn = AnimationUtils.loadAnimation(getContext(), R.anim.anim_top_in_3s);
layFilter.startAnimation(transIn);
//X||Y||透明度缩放
**package android.animation;
AnimatorSet set = new AnimatorSet();
ObjectAnimator animatorA = ObjectAnimator.ofFloat(view, "alpha", 0.7f, 1f);
animatorA.setDuration(500);
ObjectAnimator rotationX = ObjectAnimator.ofFloat(view, "scaleX", 0.7f, 1.0f);
rotationX.setInterpolator(new AccelerateInterpolator());
rotationX.setDuration(500);
ObjectAnimator rotationY = ObjectAnimator.ofFloat(view, "scaleY", 0.7f, 1.0f);
rotationY.setInterpolator(new AccelerateInterpolator());
rotationY.setDuration(500);
set.playTogether(animatorA, rotationX, rotationY);
set.playTogether(animatorA);
set.start();
//旋转动画
ObjectAnimator rotation = ObjectAnimator.ofFloat(mRotationImv,"rotation", mRotation, mRotation +  60);
mRotation += 60;
rotation.setDuration(300);
rotation.setInterpolator(new DecelerateInterpolator());
rotation.start();
//Fragment的进入退出动画
FragmentTransaction.setCustomAnimations(R.anim.anim_right_in_3s, R.anim.anim_left_out_3s);

/////////////////////////////////////////////////////////////////////////////////////////

   /**
     * Enable extended support library window features.
     * <p>
     * This is a convenience for calling
     * {@link android.view.Window#requestFeature getWindow().requestFeature()}.
     * </p>
     *
     * @param featureId The desired feature as defined in
     * {@linkplain android.view.Window#requestFeature} or {@link android.support.v4.view.WindowCompat}.
     * @return Returns true if the requested feature is supported and now enabled.
     *
     * @see android.app.Activity#requestWindowFeature
     * @see android.view.Window#requestFeature
     */


android事件分发:
viewGroup的onInterceptTouchEvent（是否拦截）-子View的dispatchTouchEvent（是否消费）-onTouch（是否消费）-onTouchEvent（是否消费）-onClick

MVP M设计成单例  P设计成单例  V本身作为参数调用P  P回调V ；P本身作为参数调用M   M回调P  . 现有逻辑x ，1设计Mx处理x，2设计接口Ix 定义Mx回调的方法同时也是V要实现的接口，3Ix作为Mx处理x的方法的参数 ，4P本身实现Ix，本身作为参数调用Mx

一个activityattach了多个Fragment后,Fragment的onResume会随activity的onResume而触发 不管是不是isHidden;所以在Fragment的 onResume里如果弹出键盘 要判断是不是 ishidden;
而Fragment的show 和 hidden  不会触发 onResume 等生命周期 但会触发onHidden
所以在onHidden里调用onResume 基本可以实现 和activity一样的逻辑

数据加载重要逻辑原则:数据标志位的重要性 && NullPointException进行异常捕获(特别是不确定是数据,比如网络请求来的数据,一定要空指针异常捕获)
不显示数据到UI可以依据 1.数据为空 2.数据标志位为不显示
显示数据到UI 一定要是 1.数据不为空 且 2.数据标志位为显示
(就是说要显示到UI 一定要有标志位 为显示,仅仅依靠数据为不为null  可能数据的子数据为null,所以一定要对NullPointException进行异常捕获)

RecycleView的总结:
JsonObject.get("city_name")当该字段为null 它可能不为null 但是把它打印出来System.out.println(JsonObject.get("city_name"));结果是null 并且JsonObject.get("city_name").getAsString会报异常,所以这种应该尽量将JsonObject转换为Bean对象使用,或者在 onBindViewHolder(CoreViewHolder holder, int position) 最外面一层加个try{},不然的话一有异常RecycleView就会不正常具体表现是数据混乱,显示不正常.或者不要用JsonObject.get("city_name").getAsString而用JsonObject.get("city_name").toString.replace("\"", "");这里一定要注意 以后取值  要注意null空异常 或者在最外面加个try{}把业务上不应该为null的打印出来


泛型类的优势:
比如写了一个CallBack类是用泛型的,当用到改类的时候已经指定了类型参数,所以可以在该CallBack类里面对回调方法传的参数进行ClassCaseException异常捕获
而如果没有指定泛型,那就要在每个实现该回调方法的地方进行ClassCaseException异常捕获,这样非常繁琐.

ui 更新 不要调用 网络请求
网络请求 在 用户点击 或者 广播接收处 调用
每个网络请求  发送精确描述改 请求结果的 message.what
每个 广播接收处 要注册 改页面 需要接收的 精确描述的 message.what
页面数据放在arguments里 且中间的状态 也要 在此切换(尽量)
页面 :  数据放在argments;数据持久到本地?;数据恢复;
请求防刷要写在在网络底层ActionTimer
请求结果要过滤 再显示否?持久化否?
一个模型 比如user,逻辑写到user一个地方
页面编程等 要考虑 懒加载还是先加载
--逻辑之间,方法之间要注意解耦:
逻辑不能调逻辑 网络请求里不能调用其他网络请求,应该另写一个方法 另写一个逻辑再在这个逻辑里组合这些逻辑
即逻辑只能组合 而不能相互调用!!
"逻辑之间不要互相调用,只能组合它们形成新的逻辑,方法之间不要相互 调用方法 而是 组合方法形成新的方法"



清空连接证书  cmd: net use *  /del /y
然后 可以用的账号密码:  1.dev - 111  2.test - 111
其中前者权限大


1.根activity的back键要拦截并且重定义为Home键功能
public boolean onKeyDown(int keyCode, KeyEvent event) {
		 
	if(keyCode == KeyEvent.KEYCODE_BACK && event.getAction() ==KeyEvent.ACTION_DOWN) {
			this.startActivity(new Intent(Intent.ACTION_MAIN).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK).addCategory(Intent.CATEGORY_HOME));
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}
2.需要重用的activity设为singleInstance 并且拦截他的 back键 重定义为要跳转到的activity
  
3.back键默认是要finish当前activity的
4.FLAG为FLAG_ACTIVITY_NEW_TASK的时候会查找是否与他本身有相同taskAffinity的task，如有则宿主到该task 否则 新建本身的taskAffinity 的task。
5.一个task为 home键右边任务栏的一个任务的选项卡（singleInstance除外），task之间可以互相叠加，重新排列
6.taskAffinity不设置则 一个application有一个task，所有activity都宿主到该task，task也有taskAffinity，默认值为根activity的taskAffinity，而根activity的taskAffinity默认为application的taskAffinity，application的taskAffinity未设置 则为 包名。
7.singleInstance的activity会新建task但是不会另建任务选项卡，现在模拟下面这种情况：
新建application，依次启动activity a、b、c 这时默认task堆栈《task是堆栈先进后出、队列是先进先出》为abc ,这时启动singleInstance 的activity d、 变成abcd 并且abc为默认task，d单独一个task，且该task有且仅有一个activity d。这时d startActivity 到 b， 这时会变成 dab《为什么会这样请看第5条》，d为一个task，ab为默认task，back键按2次会回到d， 但是你想想 a  activity是application的根activity通常是登入界面 或者 欢迎界面 而从a  back键后 居然回到 d！这会让用户感到奇怪。怎么处理？  看上面 第一条 重定义 a 的back键为home键 或者 a的back键 销毁所有。
///////////////////////////////////////////////////////////////////////////////////////////
/**
 * 1.activity创建view
 * 2.activity创建presenter<数据格式>(参数view)
 * 3.presenter在被创建的时候,即presenter的构造方法中持有了view,此时设置view持有本presenter,完成V-P的互相持有
 * 4.view要实现基view的多个方法,这里是 protected abstract int getContentViewLayoutID();//基view用来绑定布局文件
 * 和protected abstract void setViewCreated(@Nullable Bundle savedInstanceState);
 * //基view用来create view 并且要注意使用Bundle savedInstanceState恢复view
 * 5.view要实现基view(Interface)的多个方法,这里是 setProgressIndicator(boolean active)//被presenter在任务前回调
 * loadCompelete(Object O)//被presenter在任务完成时回调
 * loadError(int code, Exception e)//被presenter在任务出错时回调
 * setPresenter(BaseContract.Presenter presenter)//被view在创建时回调 用来持有一个presenter
 * 6.view 要重写android系统父view的onStart() 通过P启动task;  要重写android系统父view的onDestroyView() 销毁P
 * 7.Presenter 要实现基Presenter的多个方法 这里是  loadMore(boolean next)//被view在加载更多时回调
 * 和 start(Context appContext)//被view启动任务时回调
 * 和 destroy()//view被销毁时 回调销毁本presenter
 * 其他一些逻辑业务的方法  给view与用户交互时回调
 */


android获取当前activity UI线程利用反射 和代理 把 packageManage 成员变量 换成自定义的 代理
private void initPackageProx() {
        //获取ActivityThread实例
        Class<?> activityThreadClazz = null;
        Method currentActivityThreadMethod = null;
        try {
            activityThreadClazz = Class.forName("android.app.ActivityThread", false, getClassLoader());
            currentActivityThreadMethod = activityThreadClazz.getDeclaredMethod("currentActivityThread");
            Object activityThreadObject = null;
            activityThreadObject = currentActivityThreadMethod.invoke(null);
            //获得原始的IPackageManager
            Method getPackageManagerMethod = activityThreadClazz.getDeclaredMethod("getPackageManager");
            Object packageManager = getPackageManagerMethod.invoke(activityThreadObject);

            //生成我们的代理类
            Class<?> iPackageManagerClazz = Class.forName("android.content.pm.IPackageManager", false, getClassLoader());
            Object proxy = Proxy.newProxyInstance(getClassLoader(),
                    new Class[]{iPackageManagerClazz}, new PackageManagerProxy(this, packageManager,getUmChannel(this)));
            //把原先的IPackageManager替换掉
            Field packageManagerField = null;
            packageManagerField = activityThreadClazz.getDeclaredField("sPackageManager");
            packageManagerField.setAccessible(true);
            packageManagerField.set(activityThreadObject, proxy);

        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
    }


////////**android事件分发机制///////////////////////////////////////////////////////////
dispatchTouchEvent,onTouchEvent与onInterceptTouchEvent
1.首先明白一个常识：View 没有onInterceptTouchEvent事件，而ViewGroup这三个事件都有，是viewgroup继承View之后才加了一个方法叫onIntercepTouchEvent。
从字面意思可以看出，onInterceptTouchEvent是拦截器，用来拦截事件用的,dispatchTouchEvent是用来分发事件的，onTouchEvent是用来处理事件的。
大家不难看出，应该是先走dispatchTouchEvent然后走onTouchEvent。那OnInterceptTouchEven的调用时机是什么时候呢？为了更好的理解这三个事件，我们从简单到复杂，先从一个子view，一个viewgroup,然后viewgroup里有子view。

2.针对一个View来讲，事件是先走该View的dispatchTouchEvent，然后再走onTouchEvent(也有可能不走)。

什么时候不会走onTouchEvent呢？当重写dispatchTouchEvent,不走super.dispatchTouchEvent直接返回false，它就不会走onTouchEvent。
当然这样做是违反android架构常理的，一般的dispatchTouchEvent是不建议重写的。不过通过这个案例我们可以总结出这么一个结论.

在事件到达view的时候，先走dispatchTouchEvent，在系统的dispatchTouchEvent中它会调用该view的Ontouch方法如果此onTouch方法的down事件里返回true，则

dispatchTouchEvent方法也返回true，且把以后的move事件,up事件都传给onTouch。之后的move事件及up事件的返回值，onTouch返回什么dispatchTouchEvent也返回什么。

相反如果传第一个down事件给ontouch的时候，ontouch返回的是false,从此事件不再会传过来，也就是不会走dispatchTouchEvent。更不会走ontouchevent
3.针对一个ViewGroup来讲(没有子view的时候)：

事件的走向是dispatchTouchEvent->onInterceptTouchEvent->onTouchEvent

我们会发现它们的逻辑跟view 的没什么两样，只是在走down事件的时候onInterceptTouchEvent会在中间，而这里不管onInterceptTouchEvent返回什么都不会干扰它像2.形容的那

样运行，难道onInterceptTouchEvent这个方法没用？

4.当Viewgroup里有子view的时候


down事件走向:viewgroup.dispatchTouchEvent->viewgroup.onInterceptTouchEvent ->如果返回true->viewgroup.onTouch-------------------------------分支1
                                                                                                                                  |->如果返回false->view.dispatchTouchEvent分支2



分支1：之后的move或up事件的走向是:viewgroup.dispatchTouchEvent->viewgroup.ontouch  这里不管ontouch返回的是什么都是这个走向

分支2：down事件到了view.dispatchTouchEvent->view.onTouch->返回true->分支3
                                                                                                   |->返回false->viewgroup.ontouch->返回true->move,up等事件viewgroup.dispatchTouchEvent-
                                                                                                                                                          |->返回false,则该viewgroup不会再收到后续事件了
>viewgroup.ontouch


分支3：子view的onTOuch返回true了，表示子view能接受该事件，今后的事件走向是

Move:viewgroup.dispatchTouchEvent->viewgroup.onInterceptTouchEvent返回？

如果返回的是false，以后的move,up都这么走viewgroup.dispatchTouchEvent->viewgroup.onInterceptTouchEvent->view.dispatchTouchEvent->view.ontouch

如果返回的是true，抢夺子view的move事件接下来的走向是:强制传Cancel事件和UP事件给view,view.dispatchTouchEvent->view.ontouch(无视它返回什么)->然后把Move事件留给viewgroup:viewgroup.dispatchTouchEvent->viewgroup.ontouch

这个现象大家应该在listview或是scrollview里见过，就是当用户在scrollview里按住一个按钮，发现按钮做了相应反应（按钮高亮了），但当按住不放拖它时，发现界面在滚动，这就是因为onInterceptTouchEvent抢事件了！
///////////////////////////////////////////////////////////////////
MVP进阶:
对象调用M
方法传递 都用对象做参数 并且该对象涉及到的逻辑的 引用都让该对象持有, 注意该对象只持有与数据 逻辑有关的东西 不持有view实例 或实例

ArrayList<ReceiptAddressBean> mReceiptAddressBeanList = new Gson().fromJson(response.get(Constant.Key.RESPONSE_OBJECTS).toString(),
                        new TypeToken<ArrayList<ReceiptAddressBean>>(){}.getType());


<!-- <plugins>
<plugin>  
    <groupId>org.apache.maven.plugins</groupId>  
    <artifactId>maven-dependency-plugin</artifactId>  
    <executions>  
	<execution>  
		<id>copy-dependencies</id>
	    <phase>prepare-package</phase>  
	    <goals>  
		<goal>copy-dependencies</goal>  
	    </goals>
	    <configuration>
		<outputDirectory>target/pettyloanwx/WEB-INF/lib</outputDirectory>
		<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>
		<overWriteReleases>false</overWriteReleases>
		<overWriteSnapshots>false</overWriteSnapshots>
		<overWriteIfNewer>true</overWriteIfNewer>
	    </configuration>  
	</execution>  
    </executions>  
</plugin> 
</plugins> -->

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
System.out.println("0::"+ Build.BOARD);
System.out.println("1::"+ Build.getRadioVersion());
System.out.println("2::"+ Build.USER);
System.out.println("3::"+ Build.UNKNOWN);
System.out.println("4::"+ Build.TYPE);
System.out.println("5::"+ Build.TAGS);
System.out.println("6::"+ Build.BOOTLOADER);
System.out.println("7::"+ Build.BRAND);
System.out.println("8::"+ Build.DEVICE);
System.out.println("9::"+ Build.DISPLAY);
System.out.println("10::"+ Build.FINGERPRINT);
System.out.println("11::"+ Build.HARDWARE);
System.out.println("12::"+ Build.HOST);
System.out.println("13::"+ Build.ID);
System.out.println("14::"+ Build.MANUFACTURER);
System.out.println("15::"+ Build.MODEL);
System.out.println("16::"+ Build.PRODUCT);
System.out.println("17::"+ Build.SERIAL);

System.out: 0::PRO6
System.out: 1::MOLY.LR11.W1539.MD.MP.V12.2.P112, 2016/11/15 10:11
System.out: 2::flyme
System.out: 3::unknown
System.out: 4::user
System.out: 5::release-keys
System.out: 6::unknown
System.out: 7::Meizu
System.out: 8::PRO6
System.out: 9::Flyme 6.0.2.0A
System.out: 10::Meizu/meizu_PRO6/PRO6:6.0/MRA58K/1488739624:user/release-keys
System.out: 11::mt6797
System.out: 12::mz-builder-4
System.out: 13::MRA58K
System.out: 14::Meizu
System.out: 15::PRO 6s
System.out: 16::meizu_PRO6
System.out: 17::80SQBDPS229M8

SUPPORTED_64_BIT_ABIS=[Ljava.lang.String;@405df1d
versionCode=140
BOARD=PRO6
BOOTLOADER=unknown
TYPE=user
ID=MRA58K
TIME=1484500146000
BRAND=Meizu
TAG=Build
SERIAL=80SQBDPS229M8
HARDWARE=mt6797
SUPPORTED_ABIS=[Ljava.lang.String;@de90592
CPU_ABI=arm64-v8a
RADIO=unknown
IS_DEBUGGABLE=false
MANUFACTURER=Meizu
SUPPORTED_32_BIT_ABIS=[Ljava.lang.String;@88d4bf4
TAGS=release-keys
CPU_ABI2=
UNKNOWN=unknown
USER=flyme
FINGERPRINT=Meizu/meizu_PRO6/PRO6:6.0/MRA58K/1484499894:user/release-keys
HOST=Mz-Builder-l10
PRODUCT=meizu_PRO6
versionName=1.4.0
DISPLAY=Flyme 6.0.1.0A
MODEL=PRO 6s
DEVICE=PRO6
