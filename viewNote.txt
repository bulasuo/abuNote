xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
app:hwSkinEnable="true"

1.用MutableLiveData<Boolean> isPlay = new MutableLiveData<Boolean>();的时候,
要在对应布局文件的对应的ViewDataBinding.setLifecycleOwner(activity/fragment);
2.回退页面到home getActivity().moveTaskToBack()

3.android:clipChildren="false"; android:clipToPadding="false" recyclerView能用到

android:text="@{HeadCardViewModel.userInfo.state==User.State.STATE_LOGIN_SUCCESS?HeadCardViewModel.userInfo.nickName:@string/click_login}"
android:src="@{safeUnbox(data.checkMode) ? @drawable/ic_public_music_cancel : @drawable/ic_public_music_back}"

//去掉item的动画，防止闪烁
((SimpleItemAnimator) mChildRecyclerView.getItemAnimator()).setSupportsChangeAnimations(false);
recyclerView.addItemDecoration(mSuspensionDecoration);
view.setContentDescription(String arg);

4.
https://www.cnblogs.com/hack132/p/5539581.html
fragment.getUserVisibleHint() 

5.
mBinding = DataBindingUtil.inflate(getInflater(inflater), getContentViewLayout(), container, false);
mBinding.setLifecycleOwner(this);
mViewModel = ViewModelProviders.of(this).get(getViewModelClass());
setBinding(mBinding, mViewModel);

6.view焦点
beforeDescendants：viewgroup会优先其子类控件而获取到焦点
afterDescendants：viewgroup只有当其子类控件不需要获取焦点时才获取焦点
blocksDescendants：viewgroup会覆盖子类控件而直接获得焦点
		
2.MVVM双向绑定::
public class XData
{

    //android:onClick="@{data.onClickListener()}"
    //android:onClick="@{data.onClickListener}"
    public View.OnClickListener onClickListener() {
        return v -> {
            ToastUtil.showShort("xxx\nxxxxxxxxxddddddddd334455");
        };
    }

    //android:onClick="@{data.xOnclick}" 可以
    //android:onClick="@{data.xOnclick()}" 不可以 xOnclick是变量不是方法
    //android:onClick="@{data::xOnclick}" 可以 xOnclick是方法
    public View.OnClickListener xOnclick = this::getRootViewClickxx;
    public View.OnClickListener xOnclick22 = v -> onClickListener();


    //android:onClick="@{data.getRootViewClickxx}"
    //android:onClick="@{data::getRootViewClickxx}"
    public void getRootViewClickxx(View view) {
        ToastUtil.showShort("onRootViewClickxx-" + text);
    }

    //android:onClick="@{data.say}"
    //android:onClick="@{data::say}"
    public void say(View view) {
        ToastUtil.showShort("say");
    }

//    android:text="@={data.text}"
    public final ObservableField<String> text = new ObservableField<>();

//    android:text="@={data.textS}"  ps:一定要写get和set方法  反向绑定才会走set方法
    public String textS;

//    android:text="@={data.textS}"
    public String getTextS(){
        return textS;
    }

//    android:text="@={data.textS}"
    public void setTextS(String s){
        this.textS = s;
        text.set(s);
        ToastUtil.showShort("sayssssss");
//        notifyPropertyChanged(BR.textS);
    }

}